<?phpimport('form.Form');class ArticlesExtrasCitationsForm extends Form {	/** @var $journalId int */	var $journalId;	/** @var $plugin object */	var $plugin;	/** $var $errors string */	var $errors;		/** $var $citationParts serial */	var $citationParts;	/**	 * Constructor	 * @param $journalId int	 */	function ArticlesExtrasCitationsForm(&$plugin, $journalId) {		parent::Form($plugin->getTemplatePath() . 'templates/citationsForm.tpl');		$this->journalId = $journalId;		$this->plugin =& $plugin;	}	/*	 * Check and fix content as necessary.	 * $content string - submitted content	 * 	 * return true in all cases so that no error message from the FormValidatorCustom is showen	 * but since addError is set in some cases, the FormValidatorCustom will still fail on validate	 */	function checkAndFixContent ( $body ) {		$this->setData('body', $body);		return true;	}	/**	 * Initialize form data from current group.         * @param $args array	 */	function initData( $args ) {		// figure out the current page 		$current = array_shift($args);		$this->setData('current', $current);		$plugin =& $this->plugin;				// Add xajax to from		$this->addXAjax();		$this->callShowCurrentCitations();				$plugin->import("ArticlesExtrasDAO");		$articlesExtrasDao = new ArticlesExtrasDAO();				$templateMgr = &TemplateManager::getManager();		$templateMgr->assign('current', $current );				$journal = Request::getJournal();		$locales = $journal->getSupportedLocaleNames();		$templateMgr->assign('locales', $locales);						$articleDao = &DAORegistry::getDAO('PublishedArticleDAO');		$article = &$articleDao->getPublishedArticleByArticleId($current, null, false);                		$templateMgr->assign_by_ref('article', $article);	}		/**	 * Assign form data to user-submitted data.	 */	function readInputData() {		$this->readUserVars(array('citations', 'current'));	}	/**	 * Adds xajax to citations form	 */	function addXAjax() {		$plugin =& $this->plugin;		$templateMgr = &TemplateManager::getManager();		// Get current head data		$additionalHeadData = $templateMgr->get_template_vars('additionalHeadData');		$plugin->import('xajax/xajax_core/xajax');		$xajax = new xajax();		$xajax->configure('debug', false);		$xajax->configure('javascript URI', Request::getBaseUrl() . '/plugins/generic/articlesExtras/xajax/');		// Register functions		$xajax->registerFunction(array("showCurrentCitations", $this, "showCurrentCitations"));		$xajax->registerFunction(array("insertCitationPart", $this, "insertCitationPart"));		$xajax->registerFunction(array("insertCitation", $this, "insertCitation"));				$xajax->registerFunction(array("deleteCitation", $this, "deleteCitation"));				$xajax->registerFunction(array("preview", $this, "preview"));		$xajax->registerFunction(array("removePart", $this, "removePart"));		$xajax->registerFunction(array("callShowCurrentCitations", $this, "callShowCurrentCitations"));		$xajax->registerFunction(array("moveCitation", $this, "moveCitation"));		// Set procesor		$xajax->processRequest();		// Get xajax integration code		$xajaxJs = null;		ob_start();		$xajax->printJavascript();		echo "  <script type=\"text/javascript\">					/* <![CDATA[ */					window.onload = function() {						xajax_showCurrentCitations();					}					/* ]]> */				</script>"; // TODO: This is not working, check it!		$xajaxJs = ob_get_contents();		ob_end_clean();						$templateMgr->assign('additionalHeadData', $additionalHeadData."\n".$xajaxJs);	}		/**	 * xajax function	 * Inserts a new citation         * @param $form array	 */	function insertCitation($form){			$plugin =& $this->plugin;		$articleId = $this->getData('current');		$plugin->import('ArticlesExtrasDAO');		$plugin->import('classes/Citation');		$articlesExtrasDao = new ArticlesExtrasDAO();		// Create new citation		$newCitation = new Citation($form);		$citations = array();		if($articlesExtrasDao->settingExists($articleId, "citations")){			// Get current citations			$citations = unserialize($articlesExtrasDao->getCitationsByArticleId($articleId));		}		// Add new citation to array		$citations[] = $newCitation;		// Set citations		$articlesExtrasDao->setArticleCitations($articleId, $citations);		// Create response		$objResponse = new xajaxResponse();			$objResponse->assign("trCitation", "innerHTML", "");			$objResponse->assign("trCitationPreview", "innerHTML", "");		$objResponse->call("xajax_showCurrentCitations");	                return $objResponse;	}	/**	 * xajax function	 * Removes a citation         * @param $id int	 */	function deleteCitation($id){		$plugin =& $this->plugin;		$articleId = $this->getData('current');				$plugin->import('ArticlesExtrasDAO');		$plugin->import('classes/Citation');		$articlesExtrasDao = new ArticlesExtrasDAO();				$citationsNew = array();		if($articlesExtrasDao->settingExists($articleId, "citations")){			// Get current citations			$citations = unserialize($articlesExtrasDao->getCitationsByArticleId($articleId));			foreach($citations as $citationId => $citation){				if($id == ($citationId+1)) continue;				$citationsNew[] = $citation;			}		}			// Set citations		$articlesExtrasDao->setArticleCitations($articleId, $citationsNew);				// Create response		$objResponse = new xajaxResponse();		$objResponse->call("xajax_showCurrentCitations");					return $objResponse;	}	/**	 * xajax function	 * Displays current citations	 */	function showCurrentCitations(){		$objResponse = new xajaxResponse();		$plugin =& $this->plugin;		$articleId = $this->getData('current');		$plugin->import('ArticlesExtrasDAO');		$plugin->import('classes/Citation');		$articlesExtrasDao = new ArticlesExtrasDAO();				// Get current citations		$citations = unserialize($articlesExtrasDao->getCitationsByArticleId($articleId));		$objResponse->assign("divCurrentCitations", "innerHTML", "");		foreach($citations as $id => $citation){			$output = $this->assemblyCitation($citation);						if(!is_null($output)){				$html  = ($id+1) . ") " . $output;				$html .= " (<a onClick=\"xajax_deleteCitation(" . ($id+1) . ");\">X</a>)";								if(($id+1) != 1)					$html .= " (<a onClick=\"xajax_moveCitation(" . ($id+1) . ", 'up');\">&uarr;</a>)";									if(($id+1) != count($citations))					$html .= " (<a onClick=\"xajax_moveCitation(" . ($id+1) . ", 'down');\">&darr;</a>)";									$html .= "<br />";				$objResponse->append("divCurrentCitations", "innerHTML", $html);			}		}				if(count($citations) == 0) $objResponse->assign("divCurrentCitations", "innerHTML", "No current citations!");                		return $objResponse;        }	        /**	 * xajax function	 * Wraper for ShowCurrantCitations	 */	function callShowCurrentCitations(){		$objResponse = new xajaxResponse();		$objResponse->call("xajax_showCurrentCitations");		return $objResponse;	}	/**	 * xajax	 * Makes a preview of a citation from the editing form         * @param $form array	 */	function preview($form){		$objResponse = new xajaxResponse();				$this->plugin->import('classes/Citation');		$citation = &new Citation($form);		$output = $this->assemblyCitation($citation);		if(!is_null($output))                    $objResponse->assign("trCitationPreview", "innerHTML", "<i>Preview:</i> " . $output);		return $objResponse;	}	/**	 * xajax	 * Moves a citation up/down         * @param $id int         * @param $direction string	 */	function moveCitation($id, $direction = "up"){		$plugin =& $this->plugin;		$articleId = $this->getData('current');		$id -= 1;        	$plugin->import('ArticlesExtrasDAO');		$plugin->import('classes/Citation');		$articlesExtrasDao = new ArticlesExtrasDAO();		$citations = array();		if($articlesExtrasDao->settingExists($articleId, "citations")){						// Get current citations			$citations = unserialize($articlesExtrasDao->getCitationsByArticleId($articleId));			if(isset($citations[$id])){				// down				if($direction == "down"){					// check this isn't the latest					if(isset($citations[$id+1])){						$temp = $citations[$id+1];						$citations[$id+1] = $citations[$id];						$citations[$id] = $temp;					}				}				// up				else{					// check this isn't the first					if(isset($citations[$id-1])){						$temp = $citations[$id-1];						$citations[$id-1] = $citations[$id];						$citations[$id] = $temp;					}				}			}						// Set citations			$articlesExtrasDao->setArticleCitations($articleId, $citations);		}				// Create response		$objResponse = new xajaxResponse();		$objResponse->call("xajax_showCurrentCitations");						return $objResponse;	}			/**	 * Makes a citation	 */	function assemblyCitation(&$citation){		$templateMgr = &TemplateManager::getManager();		$templateMgr->assign_by_ref('citation', $citation);				$output = null;		ob_start();                    $templateMgr->display($this->plugin->getTemplatePath() . 'templates/citation.tpl');                    $output = ob_get_contents();		ob_end_clean();						return $output;	}		/**	 * Changes the style atribute of the options in selectCitationPart	 */	function changeDisplay(&$objResponse, $name, $switch = true){		$display = ($switch) ? "" : "disabled";		$objResponse->assign("selectCitationPart." . $name, "disabled", $display);        }	/**	 * Return an array of years from 1961-current	 */	function getYears(){		$year = date("Y");                $years = array();		for($i=1900;$i<=$year;$i++) $years[] = $i;		return $years;	}        /**	 * Return an array of months	 */	function getMonths(){            $months = array(0 => "",                            1 => "Ene",                            2 => "Feb",                            3 => "Mar",                            4 => "Abr",                            5 => "May",                            6 => "Jun",                            7 => "Jul",                            8 => "Ago",                            9 => "Sep",                            10 => "Oct",                            11 => "Nov",                            12 => "Dic") ;            return $months;        }	/**	 * xajax function	 * Inserts a new Citation Part         * @param $form array	 */	function insertCitationPart($form){            $objResponse = new xajaxResponse();            $control = NULL;            $part = $form['selectCitationPart'];            switch($part){                case "authors": { $control = $this->getControl(Localex::translate('plugins.generic.articlesExtras.citations.authors'), $part, "text", 25); break; }                case "author_organization": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.orgAuthors'), $part, "text", 25); break; }                case "editors": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.editors'), $part, "text", 25); break; }                case "title": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.title'), $part, "text", 35); break; }                case "typeTitle": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.typetitle'), $part, "text", 15); break; }                case "typeSource": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.typesource'), $part, "text", 15); break; }                case "edition": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.edition'), $part, "text", 15); break; }                case "source": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.source'), $part, "text", 20); break; }                case "pubPlace": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.pubPlace'), $part, "text", 20); break; }                case "state": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.state'), $part, "text", 20); break; }                case "editorial": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.editorial'), $part, "text", 20); break; }                case "date": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.date'), "", "date"); break; }                case "volume": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.volume'), $part, "text", 5); break; }                case "suppl_volume": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.supplvolume'), $part, "text", 5); break; }                case "part_volume": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.partvolume'), $part, "text", 5); break; }                case "issue": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.issue'), $part, "text", 5); break; }                case "suppl_issue":{ $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.supplissue'), $part, "text", 5); break; }                case "part_issue": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.partissue'), $part, "text", 5); break; }                case "retraction_object_of": {                    $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.retractionin'), NULL, "subtitle");                    $control .= $this->addHr();                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.authors'), "retAuthors", "text", 25);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.source'), "retSource", "text", 15);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.date'), "ret", "date");                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.volume'), "retVolume", "text", 5);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.issue'), "retIssue", "text", 5);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.pages'), "ret_", "pages");                    $control .= $this->getControl("object_of", "retId", "hidden");                    $control .= $this->addHr();                    break;                }                case "retraction_contains": {                    $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.retractionof'), NULL, "subtitle");                    $control .= $this->addHr();                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.authors'), "retAuthors", "text", 25);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.source'), "retSource", "text", 15);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.date'), "ret", "date");                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.volume'), "retVolume", "text", 5);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.issue'), "retIssue", "text", 5);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.pages'), "ret_", "pages");                    $control .= $this->getControl("contains", "retId", "hidden");                    $control .= $this->addHr();                    break;                }                case "correction":{                    $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.correction'), NULL, "subtitle");                    $control .= $this->addHr();                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.source'), "corSource", "text", 15);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.date'), "cor", "date");                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.volume'), "corVolume", "text", 5);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.issue'), "corIssue", "text", 5);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.pages'), "cor_", "pages");                    $control .= $this->addHr();                    break;                }                case "erratum":{                    $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.erratum'), NULL, "subtitle");                    $control .= $this->addHr();                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.source'), "errSource", "text", 15);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.date'), "err", "date");                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.volume'), "errVolume", "text", 5);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.issue'), "errIssue", "text", 5);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.pages'), "err_", "pages");                    $control .= $this->addHr();                    break;                }                case "pages": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.pages'), "", "pages"); break; }                case "siteDate": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.dateweb'), "", "dateweb"); break; }                case "epub":{                    $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.epub'), NULL, "subtitle");                    $control .= $this->addHr();                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.date'), "epub", "date");                    $control .= $this->addHr();                    break;                }                case "sitePage": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.pagewebsite'), $part, "text", 10); break; }		case "url": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.url'), $part, "text", "30"); break; }		case "citDate": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.citdate'), "cit", "date"); break; }		case "updDate": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.upddate'), "upd", "date"); break; }		case "bookChapter":{				                    $control  = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.bookchapter'), null, "subtitle");                    $control .= $this->addHr();                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.authors'), "bookChapAuthors", "text", 25);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.title'), "bookChapTitle", "text", 35);                    $control .= $this->addHr();                    break;		}		case "pageCount": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.pagecount'), $part, "text", "3"); break; }		case "section": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.section'), $part, "text", "3"); break; }		case "column": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.col'), $part, "text", "3"); break; }                case "forthcoming": { $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.forthcoming'), $part, "text", "6"); break; }		case "confArticle": {                    $control  = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.confArticle'), null, "subtitle");                    $control .= $this->addHr();                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.authors'), "confArtAuthors", "text", 25);                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.title'), "confArtTitle", "text", 35);                    $control .= $this->addHr();                    break;		}                case "conference": {                    $control = $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.conference'), null, "subtitle");                    $control .= $this->addHr();                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.sponsor'), "confSponsor", "text", "15");                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.title'), "confTitle", "text", "35");                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.date'), "conf", "date");                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.city'), "confCity", "text", "10");                    $control .= $this->getControl(Locale::translate('plugins.generic.articlesExtras.citations.state_country'), "confState", "text", "10");                    $control .= $this->addHr();                    break;		}            }            if(!is_null($control)) $objResponse->append("trCitation", "innerHTML", $control);		            return $objResponse;	}        /* Return an HTML form input         * @param $title string         * @param $part string         * @param $type string         * @param @size int         */	function getControl($title, $part, $type, $size = 25){            $control = null;            switch($type){                case "text": {                    $control = "$title:&nbsp;<input type=\"text\" id=\"$part\" name=\"$part\" size=\"$size\" /><br />";                    break;                }                case "subtitle":{                    $control = "<h5>$title</h5>";                    break;                }                case "date":{                    $currYear = date("Y");                    $years = $this->getYears();                    $months = $this->getMonths();                    $nameYear = $part == "" ? "year" : $part."Year";                    $nameMonth = $part == "" ? "month" : $part."Month";                    $nameDay = $part == "" ? "day" : $part."Day";                                        for($i=1;$i<=31;$i++) $days[] = $i;                                        // Add years                    $control = "$title:&nbsp;<select id=\"$nameYear\" name=\"$nameYear\">";                    foreach($years as $year) {                        $selected = $year == $currYear ? "selected=\"selected\"" : "";                        $control .= "<option $selected value=\"$year\">$year</option>";                    }                    $control .= "</select>";                    // Add months                    $control .= "&nbsp;<select id=\"$nameMonth\" name=\"$nameMonth\">";                    foreach($months as $id => $month) $control .= "<option value=\"$id\">$month</option>";                    $control .= "</select>";                    // Add days                    $control .= "&nbsp;<select id=\"$nameDay\" name=\"$nameDay\">";                    $control .= "<option value=\"\"></option>";                    foreach($days as $day) $control .= "<option value=\"$day\">$day</option>";                    $control .= "</select>";                    $control .= "<br />";                    break;                }                case "pages":{                    $control  = "$title:&nbsp;";                    $control .= "<i>Pag. Inicial:</i>&nbsp;<input type=\"text\" id=\"".$part."page_initial\" name=\"".$part."page_initial\" size=\"3\" />&nbsp;-&nbsp;<i>Pag. Final:</i>&nbsp;<input type=\"text\" id=\"".$part."page_final\" name=\"".$part."page_final\" size=\"3\" /><br />";                    break;                }                case "hidden":{                    $control = "<input type=\"hidden\" id=\"$part\" name=\"$part\" value=\"$title\"/>";                    break;                }                case "dateweb":{                    $control  = "$title:&nbsp;";                    $control .= "Desde:&nbsp;<input type=\"text\" id=\"siteDateFrom\" name=\"siteDateFrom\" size=\"3\" />";                    $control .= "&nbsp;-&nbsp;";                    $control .= "Hasta:&nbsp;<input type=\"text\" id=\"siteDateTo\" name=\"siteDateTo\" size=\"3\" /><br />";                    break;                }            }            return $control;	}        function addHr(){            return "<hr>";        }}?>